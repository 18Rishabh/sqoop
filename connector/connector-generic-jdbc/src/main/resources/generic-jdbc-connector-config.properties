# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

connector.name = Generic JDBC Connector

# Link Config
linkConfig.label = Database connection
linkConfig.help = Contains configuration that is required to establish connection with your database server.

linkConfig.jdbcDriver.label = Driver class
linkConfig.jdbcDriver.example = com.mysql.jdbc.Driver
linkConfig.jdbcDriver.help = Fully qualified class name of the JDBC driver that will be used for establishing \
  this connection. Check documentation for instructions how to make the driver's jar files available to Sqoop 2 server.

linkConfig.connectionString.label = Connection String
linkConfig.connectionString.example = jdbc:mysql://mysql.server/sqoop
linkConfig.connectionString.help = JDBC connection string associated with your database server.

linkConfig.username.label = Username
linkConfig.username.example = sqoop-user
linkConfig.username.help = Username to be used for connection to the database server.

linkConfig.password.label = Password
linkConfig.password.example = Sup3rS3cr3t!
linkConfig.password.help = Password to be used for connection to the database server.

linkConfig.fetchSize.label = Fetch Size
linkConfig.fetchSize.example = 1000
linkConfig.fetchSize.help = Optional hint specifying requested JDBC fetch size.

linkConfig.jdbcProperties.label = Connection Properties
linkConfig.jdbcProperties.example = useCompression=true
linkConfig.jdbcProperties.help = Key-value pairs that should be passed down to JDBC driver when establishing connection.


# From Job Config
fromJobConfig.label = Database source
fromJobConfig.help = Specifies source and way how the data should be fetched from source database.

fromJobConfig.schemaName.label = Schema name
fromJobConfig.schemaName.example = my_schema
fromJobConfig.schemaName.help = Schema name if the table is not stored in default schema. Note: Not all database systems \
  understands the concept of schema.

fromJobConfig.tableName.label = Table name
fromJobConfig.tableName.example = input_table
fromJobConfig.tableName.help = Input table name from from which data will be retrieved.

fromJobConfig.sql.label = SQL statement
fromJobConfig.sql.example = select * from input_table where ${CONDITIONS}
fromJobConfig.sql.help = Import data from given query's results set rather then static table.

fromJobConfig.columnList.label = Column names
fromJobConfig.columnList.example = id,text,city
fromJobConfig.columnList.help = Subset of columns that should be retrieved from source table.

fromJobConfig.partitionColumn.label = Partition column
fromJobConfig.partitionColumn.example = id
fromJobConfig.partitionColumn.help = Input column that should be use to split the import into independent parallel \
  processes. This column will be used in condition of generated queries.

fromJobConfig.allowNullValueInPartitionColumn.label = Partition column nullable
fromJobConfig.allowNullValueInPartitionColumn.example = true
fromJobConfig.allowNullValueInPartitionColumn.help = Set true if partition column can contain NULL value.

fromJobConfig.boundaryQuery.label = Boundary query
fromJobConfig.boundaryQuery.example = select min(id), max(id) from input_table
fromJobConfig.boundaryQuery.help = Customize query to retrieve minimal and maximal value of partition column.


# ToJob Config
toJobConfig.label = Database target
toJobConfig.help = Describes target destination and way how data should be persisted on the RDBMS system.

toJobConfig.schemaName.label = Schema name
toJobConfig.schemaName.example = my_schema
toJobConfig.schemaName.help = Schema name if the table is not stored in default schema. Note: Not all database systems \
  understands the concept of schema.

toJobConfig.tableName.label = Table name
toJobConfig.tableName.example = target_table
toJobConfig.tableName.help = Destination table name to store transfer results.

toJobConfig.columnList.label = Column names
toJobConfig.columnList.example = id,text,city
toJobConfig.columnList.help = Subset of columns that will will be written to. Omitted columns have to either allow \
  NULL values or have defined default value.

toJobConfig.stageTableName.label = Staging table
toJobConfig.stageTableName.example = staging_target_table
toJobConfig.stageTableName.help = Name of table with same structure as final table that should be used as a staging \
  destination. Data will be directly written to final table if no staging table is specified.

toJobConfig.shouldClearStageTable.label = Clear stage table
toJobConfig.shouldClearStageTable.example = true
toJobConfig.shouldClearStageTable.help = If set to true, staging table will be wiped out upon job start.

incrementalRead.label = Incremental read
incrementalRead.help = Configures optional incremental read from the database where source data are changing over time \
  and only new changes need to be re-imported.

incrementalRead.checkColumn.label = Check column
incrementalRead.checkColumn.example = last_update_date
incrementalRead.checkColumn.help = Column that is checked during incremental read for new values.

incrementalRead.lastValue.label = Last value
incrementalRead.lastValue.example = 19870202
incrementalRead.lastValue.help = Last imported value, job will read only newer values.


# Dialect
dialect.label = SQL Dialect
dialect.help = Database dialect that should be used for generated queries.

dialect.identifierEnclose.label = Identifier enclose
dialect.identifierEnclose.example = `
dialect.identifierEnclose.help = Character(s) that should be used to enclose table name, schema or column names.
