# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

connector.name = Oracle connector

connectionConfig.label = Oracle connection configuration
connectionConfig.help = Information required to connect to an Oracle server.

connectionConfig.connectionString.label = Connection string
connectionConfig.connectionString.example = jdbc:oracle:thin:@oracle.sqoop.org:1521:sqoop_db
connectionConfig.connectionString.help = JDBC connection string associated with your Oracle database.

connectionConfig.username.label = Username
connectionConfig.username.example = sqoop-user
connectionConfig.username.help = Username to be used for connection to the Oracle server.

connectionConfig.password.label = Password
connectionConfig.password.label = Sup3rS3rcr3t!
connectionConfig.password.help = Password to be used for connection to the Oracle server.

connectionConfig.jdbcProperties.label = Connection properties
connectionConfig.jdbcProperties.example = defaultRowPrefetch=1000
connectionConfig.jdbcProperties.help = Key-value pairs that should be passed down to JDBC driver when establishing connection.

connectionConfig.timeZone.label = Time zone
connectionConfig.timeZone.example = GMT
connectionConfig.timeZone.help = Time zone that will be used for all created sessions.

connectionConfig.actionName.label = Session action name
connectionConfig.actionName.example = sqoop-import
connectionConfig.actionName.help = The connector will call DMS_APPLICATION_INFO.SET_MODULE procedure with action_name set to this value.

connectionConfig.fetchSize.label = fetch size
connectionConfig.fetchSize.example =  1000
connectionConfig.fetchSize.help = Optional hint specifying requested JDBC fetch size.

connectionConfig.initializationStatements.label = Initialization statements
connectionConfig.initializationStatements.example = alter session disable parallel query
connectionConfig.initializationStatements.help = List of statements that will be executed on each connection immediately after opening and before any metadata/data retrieving queries.

connectionConfig.jdbcUrlVerbatim.label = Strict connection string
connectionConfig.jdbcUrlVerbatim.example = false
connectionConfig.jdbcUrlVerbatim.help = By default, OraOop will use specified connection string only to retrieve all instances of your RAC and \
  then for actual data transfer jobs will generate connection strings to distribute the load across all nodes. This distribution can be turned \
  off by setting this property to false.

connectionConfig.racServiceName.label = RAC service name
connectionConfig.racServiceName.example = sales.sqoop.org
connectionConfig.racServiceName.help = Service name that will be used for automatically generated connection strings when connecting to RAC.


toJobConfig.label = Database target
toJobConfig.help = Describes target destination and way how data should be persisted on the RDBMS system.

toJobConfig.tableName.label = Table name
toJobConfig.tableName.example = target_table
toJobConfig.tableName.help = Destination table name to store transfer results.

toJobConfig.columns.label = Columns
toJobConfig.columns.example = id,text,city
toJobConfig.columns.help = Subset of columns that will will be written to. Omitted columns have to either allow \
  NULL values or have defined default value.

toJobConfig.templateTable.label = Template table name
toJobConfig.templateTable.example = existing_table
toJobConfig.templateTable.help = If this field is not empty, then target table will get created with the same structure as the \
  template table.

toJobConfig.partitioned.label = Partitioned
toJobConfig.partitioned.example = true
toJobConfig.partitioned.help = If creating a new target table with structure from template table, this option controls whether \
  the new table should be partitioned or not.

toJobConfig.nologging.label = Nologging
toJobConfig.nologging.example = Nologging
toJobConfig.nologging.help = If creating a new target table with structure from template table, when set to true, this option will \
   add NOLOGGING clause to the CREATE TABLE statement.

toJobConfig.updateKey.label = Update columns
toJobConfig.updateKey.example = id,date
toJobConfig.updateKey.help = Specifying this option will switch OraOop to update mode. Instead of generating INSERT statements to \
  insert data to Oracle, it will generate UPDATE statements. Configured options will then be used in WHERE clause.

toJobConfig.updateMerge.label = Merge updates
toJobConfig.updateMerge.example = true
toJobConfig.updateMerge.help = Instead of generating only UPDATE statements, OraOop will generate MERGE statement that will do so \
  called upsert - will either update existing rows or insert new rows.

toJobConfig.dropTableIfExists.label = Drop table
toJobConfig.dropTableIfExists.example = true
toJobConfig.dropTableIfExists.help = If set to true then, then OraOop will drop existing target table and re-create it using the \
  template table structure.

toJobConfig.storageClause.label = Template storage clause
toJobConfig.storageClause.example = STORAGE (INITIAL 100K NEXT 50K MINEXTENTS 1 MAXEXTENTS 50 PCTINCREASE 5)
toJobConfig.storageClause.help = If target table will get created, insert specified storage clause to the CREATE TABLE statement.

toJobConfig.temporaryStorageClause.label = Temporary storage clause
toJobConfig.temporaryStorageClause.example = STORAGE (INITIAL 100K NEXT 50K MINEXTENTS 1 MAXEXTENTS 50 PCTINCREASE 5)
toJobConfig.temporaryStorageClause.help = Storage clause that will be used for all temporary tables that OraOop might need to create.

toJobConfig.appendValuesHint.label = Append values hint
toJobConfig.appendValuesHint.example = AUTO
toJobConfig.appendValuesHint.help = Specifies whether generated INSERT queries should take advantage of Oracle's APPEND hint.

toJobConfig.parallel.label = Parallel
toJobConfig.parallel.example = true
toJobConfig.parallel.help = When moving data from temporary tables, this option controls whether generated queries shoud include \
  PARALLEL keyword.


fromJobConfig.label = Database source
fromJobConfig.help = Specifies source and way how the data should be fetched from source database.

fromJobConfig.tableName.label = Table name
fromJobConfig.tableName.example = input_table
fromJobConfig.tableName.help = Input table name from from which data will be retrieved.

fromJobConfig.columns.label = Columns
fromJobConfig.columns.example = id,text,city
fromJobConfig.columns.help = Subset of columns that should be retrieved from source table.

fromJobConfig.consistentRead.label = Consistent read
fromJobConfig.consistentRead.example = true
fromJobConfig.consistentRead.help = If true, connector will use Oracle Flashback technology to achieve consistency across \
  independent connections.

fromJobConfig.consistentReadScn.label = Consistent read SCN
fromJobConfig.consistentReadScn.example = 10093466
fromJobConfig.consistentReadScn.help = Optional SCN value that should be used to read the consistent point in time. Connector \
  will use latest value during initialization if not specified.

fromJobConfig.partitionList.label = Partitions
fromJobConfig.partitionList.example = PART1,PART2
fromJobConfig.partitionList.help = Subset of partitions that should be retrieved from source table.

fromJobConfig.dataChunkMethod.label = Data chunk method
fromJobConfig.dataChunkMethod.example = ROWID
fromJobConfig.dataChunkMethod.help = Method that will be used to slice the data in source table to transfer them in parallel.

fromJobConfig.dataChunkAllocationMethod.label = Data chunk allocation method
fromJobConfig.dataChunkAllocationMethod.example = ROUNDROBIN
fromJobConfig.dataChunkAllocationMethod.help = Specific way in which various data chunks gets distributed to partitions.

fromJobConfig.whereClauseLocation.label = Where clause
fromJobConfig.whereClauseLocation.example = SUBSPLIT
fromJobConfig.whereClauseLocation.help = Determines whether the where clause should be used inside each data chunk separately \
   or for union of all chunks that are selected in single partition.

fromJobConfig.omitLobColumns.label = Omit LOB columns
fromJobConfig.omitLobColumns.example = true
fromJobConfig.omitLobColumns.help = If set to true, then OraOop will ignore importing all LOB based columns (CLOB, BLOB).

fromJobConfig.queryHint.label = Query hint
fromJobConfig.queryHint.example = ALL_ROWS
fromJobConfig.queryHint.help = Hints that should be used for queries that are transferring data.

fromJobConfig.conditions.label = Conditions
fromJobConfig.conditions.example = id > 100
fromJobConfig.conditions.help = Additional conditions that should be used inside WHERE clause to limit imported data.